<?php

/**
 * get_results
 *
 * give back a json containing the results generated by the MixMHCp script
 *
 * @param string $result_id
 * @return json
 * @author Roman
 */

function get_results($result_id){

    if(! preg_match('/^\w{13}$/', $result_id)) throw new Exception("ERROR: invalid ResultId", 501);

    // the data directory
    $result_dir = DATA_PATH."/".$result_id."/results/";

    if(! file_exists($result_dir)) throw new Exception("There are no results available for Result ID <strong>".$result_id."</strong>", 501);

    // parse motifs nr from KLD.txt file
    $motifs = parse_KLD_motifs($result_dir."/KLD/best_ncl.txt");

    $html_content = file_get_contents($result_dir."/logos.html");

    // construct results
    $motif_res = array();

    foreach($motifs as $motif){
        $info_from_html = get_info_from_html($html_content, $motif);
        if(count($info_from_html) <= 0 || count($info_from_html[0]) <= 1) throw new Exception("Could not parse info from logos.html", 501);

       $res_func = function($img, $id, $nr_pep, $pmw){
           return array('id' => $id, 'logo_img' => $img, 'PMW' => (float)$pmw, 'nr_peptides' => (int)$nr_pep);
       };

        $motif_res[$motif] = array_map(
            $res_func,
            $info_from_html[1],
            $info_from_html[2],
            $info_from_html[3],
            $info_from_html[4]
       );
    }

    // parse id of best cluster
    $best_cluster = get_best_nlc($result_dir.'KLD/best_ncl.txt');

    return array('result_id' => $result_id, 'motifs' => $motif_res, 'best_cluster' => $best_cluster);
}


/**
 * get_info_from_html
 *
 * parse image file names and the corresponding infos from logos.html
 *
 * @param $html_file
 * @return array of array
 */
function get_info_from_html($html_content, $motif){
    $pattern = '/(LoLa_L[0-9]+_'.$motif.'.+png).+\<p\>(Trash|[0-9]+).+?([0-9]+).+?([\.|0-9]+).+\<\/p\>/';
    preg_match_all($pattern, $html_content, $out);
    return $out;
}


/**
 * get_best_nlc
 *
 * parse best cluster nr from KLD/best_ncl.txt
 *
 * @param string path to best_ncl.txt
 * @return integer best cluster nr
 * @author Roman
 */
function get_best_nlc($best_ncl_file){
    $best_ncl = file_get_contents($best_ncl_file);
    preg_match('/.+\:\s*(\d+)/', $best_ncl, $matches);
    return intval($matches[1]);
}

/**
 * get_nr_peps
 *
 * parse number of peptides from logo file name
 *
 * @param string $img_names Logo file name
 * @return array of nr of peptides
 * @author Roman
 */
function get_nr_peps($img_names){
    return array_map(function($name){
        preg_match('/.+\-(\d+)\.png$/', $name, $matches);
        return $matches[1];
    }, $img_names);
}

/**
 * get_pmw_values
 *
 * parse PMW values from PMW files
 *
 * @param string $pattern the file search pattern
 * @return array of PMW values
 * @author Roman
 */
function get_pmw_values($pattern){
    $pmw_files = glob($pattern);

    $pmw_parsing = function($file){
        $filename = basename($file);
        $pmw_name = str_replace(".txt", "", $filename);
        $pmw_content = file_get_contents($file);
        preg_match('/'.$pmw_name.'\s+([\d|\.]+).*/', $pmw_content, $matches);
        return $matches[1];
    };

    return array_map($pmw_parsing, $pmw_files);
}


/**
 * get_img_filenames
 *
 * get all the Logos filenames for a given directory
 *
 * @param string $pattern the file search pattern
 * @return array
 * @author Roman
 */
function get_img_filenames($pattern, $motif){
    // get only the images without a 'Trash' in their names
    $all_img_files = glob($pattern);
    $img_files = preg_grep('/LoLa_L[0-9]+_'.$motif.'_/', $all_img_files);
    $img_files_no_trash = preg_grep('/Trash/', $img_files, PREG_GREP_INVERT);

    return array_map(function($p){
        return basename($p);
    }, $img_files_no_trash);
}


/**
 * parse_KLD_motifs
 *
 * get an array of motifs
 *
 * @param KLD file path
 * @return array of motif numbers
 * @author Roman
 */
function parse_KLD_motifs($kld_file){
    $content = file_get_contents($kld_file);
    $content_array_all = explode("\n", $content);
    $content_array = array_slice($content_array_all, 1, -1);

    return array_map(function($p){
        preg_match("/(\\d+)\\s+.*/", $p, $out);
        return $out[1];
    }, $content_array);

}


?>